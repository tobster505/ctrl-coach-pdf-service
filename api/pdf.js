// Force Node runtime (NOT Edge)
export const config = { runtime: 'nodejs' };

// /api/pdf.js — Minimal PDF download endpoint for Vercel using pdf-lib
import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';

// Replace non-ANSI characters with ASCII-safe equivalents for StandardFonts
function toAnsi(s) {
  if (!s) return '';
  return String(s)
    // arrows
    .replace(/→|⇒|➔|➜|⟶/g, '->')
    .replace(/←|⇐|⟵/g, '<-')
    .replace(/↔|⇔/g, '<->')
    // dashes
    .replace(/[–—]/g, '-')
    // bullets / middots
    .replace(/[•·]/g, '*')
    // curly quotes
    .replace(/[“”]/g, '"')
    .replace(/[‘’]/g, "'")
    // strip any remaining non-ASCII (incl. emojis)
    .replace(/[^\x00-\x7F]/g, '');
}

function wrapTextAnsi(text, maxChars) {
  const words = toAnsi(text).split(/\s+/);
  const lines = [];
  let line = '';
  for (const w of words) {
    if ((line ? line + ' ' : '').length + w.length > maxChars) {
      if (line) lines.push(line);
      line = w;
    } else {
      line = (line ? line + ' ' : '') + w;
    }
  }
  if (line) lines.push(line);
  return lines;
}

export default async function handler(req, res) {
  try {
    const name = String(req.query.name || 'ctrl_report.pdf').replace(/[^\w.\-]+/g, '_');
    let payload = null;

    // Optional base64 JSON payload in ?data=
    if (req.query.data) {
      try {
        const json = Buffer.from(String(req.query.data), 'base64').toString('utf8');
        payload = JSON.parse(json);
      } catch (e) {
        console.error('Bad payload:', e);
      }
    }

    // Safe defaults (so /api/pdf works even with no params)
    const p = Object.assign({
      title: "CTRL Snapshot — V3",
      band: null,
      seq: ["R","T","C","T","R"],
      counts: { C:1, T:2, R:2, L:0 },
      summary: "Dominant: Triggered. Journey: steady across the five moments.",
      journey: "You tended to stay in Regulated from first to last.",
      relation: "Mostly steady with a couple of shifts.",
      chartUrl: null
    }, payload || {});

    const pdf = await PDFDocument.create();
    const page = pdf.addPage([595.28, 841.89]); // A4
    const { width, height } = page.getSize();
    const margin = 40;

    const font = await pdf.embedFont(StandardFonts.Helvetica);
    const fontB = await pdf.embedFont(StandardFonts.HelveticaBold);
    let y = height - margin;

    // Title
    page.drawText(toAnsi(p.title || "CTRL Snapshot — V3"), {
      x: margin, y, size: 18, font: fontB, color: rgb(0,0,0)
    });
    y -= 26;

    // Optional band headline
    if (p.band && (p.band.title || p.band.state)) {
      const bandLine = `${p.band.title || ''}${p.band.state ? ` - ${p.band.state}` : ''}`.trim();
      if (bandLine) {
        page.drawText(toAnsi(bandLine), { x: margin, y, size: 12, font, color: rgb(0.2,0.2,0.2) });
        y -= 18;
      }
    }

    // Sequence & counts
    const seqLine = Array.isArray(p.seq) ? `Sequence: ${p.seq.join(' -> ')}` : "";
    if (seqLine) { page.drawText(toAnsi(seqLine), { x: margin, y, size: 11, font }); y -= 16; }

    const c = p.counts || {};
    const countsLine = `Counts - C:${c.C||0}  T:${c.T||0}  R:${c.R||0}  L:${c.L||0}`;
    page.drawText(toAnsi(countsLine), { x: margin, y, size: 11, font }); y -= 18;

    // Paragraph blocks
    const blocks = [
      { label: "Summary", text: p.summary },
      { label: "Journey", text: p.journey },
      { label: "How it shows", text: p.relation }
    ];
    for (const b of blocks) {
      if (!b.text) continue;
      page.drawText(toAnsi(`${b.label}:`), { x: margin, y, size: 12, font: fontB });
      y -= 16;
      for (const ln of wrapTextAnsi(b.text, 98)) {
        page.drawText(ln, { x: margin, y, size: 11, font });
        y -= 14;
      }
      y -= 6;
    }

    // Optional chart image (PNG or JPG)
    if (p.chartUrl && y > 250) {
      try {
        const resp = await fetch(p.chartUrl);
        const buf = new Uint8Array(await resp.arrayBuffer());
        let img;
        try { img = await pdf.embedPng(buf); } catch { img = await pdf.embedJpg(buf); }
        const maxW = width - margin * 2;
        const w = Math.min(maxW, 420);
        const h = w * (img.height / img.width);
        page.drawImage(img, { x: margin, y: y - h, width: w, height: h });
        y -= (h + 10);
      } catch (e) {
        console.error('Chart fetch failed:', e);
      }
    }

    // Footer
    page.drawText(toAnsi("CTRL - Generated by /api/pdf"), {
      x: margin, y: 30, size: 9, font, color: rgb(0.4,0.4,0.4)
    });

    const bytes = await pdf.save();
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${name}"`);
    res.status(200).send(Buffer.from(bytes));
  } catch (e) {
    console.error('PDF error:', e);
    if (String(req.query.debug||'')==='1') {
      res.status(500).send(`Error generating PDF: ${String(e && e.message || e)}`);
    } else {
      res.status(500).send('Error generating PDF');
    }
  }
}
